import { MAIN_MENU_BAR_TEMPLATE } from './menus/mainMenu';
import { app, BrowserWindow, ipcMain, Menu } from 'electron';
import { IpcEvents, WEBCONTENTS_READY_FOR_IPC_SIGNAL } from '../common/ipc-events';
import { LOG } from '../common/utils/debug';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Global reference to mainWindow to prevent garbage collection.
export const browserWindows: Array<BrowserWindow | null> = [];

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createMainWindow = (): BrowserWindow => {
  // Create the browser window.
  const mainWin = new BrowserWindow({
    height: 720,
    width: 1280,
    minHeight: 470,
    minWidth: 640,
    autoHideMenuBar: true,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: true,
      webSecurity: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  // load the menubar
  const mainMenu = Menu.buildFromTemplate(MAIN_MENU_BAR_TEMPLATE);
  Menu.setApplicationMenu(mainMenu);

  // and load the index.html of the app.
  mainWin.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWin.webContents.openDevTools();

  // Add our new win to the list of global BrowserWindow's
  browserWindows.push(mainWin);

  return mainWin;
};

/**
 * Gets or creates the main window, returning it in both cases.
 */
 export function getOrCreateMainWindow(): BrowserWindow {
  return (
    BrowserWindow.getFocusedWindow() || browserWindows[0] || createMainWindow()
  );
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createMainWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.on(WEBCONTENTS_READY_FOR_IPC_SIGNAL, () => { LOG('got it 1') }); 
ipcMain.on(IpcEvents.REQ_TEST, () => { LOG('got it 2') }); 
